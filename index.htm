<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Bingo da Tabuada</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@400;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Poppins', sans-serif;
        }
    </style>
</head>
<body class="bg-slate-100 flex items-center justify-center min-h-screen p-4">

    <main class="bg-white rounded-2xl shadow-2xl p-6 md:p-8 w-full max-w-2xl text-center">

        <header class="mb-6">
            <h1 class="text-4xl font-bold text-indigo-600">Bingo da Tabuada</h1>
            <p class="text-slate-500 mt-2">Sorteie uma multiplicação e veja o resultado!</p>
        </header>

        <!-- Card de Sorteio -->
        <div id="draw-container" class="h-64 w-full">
            <div id="card" class="relative w-full h-full">
                <!-- Card de Multiplicação -->
                <div id="problem-display" class="absolute w-full h-full flex flex-col items-center justify-center bg-indigo-500 rounded-xl text-white p-4 shadow-lg">
                    <span id="problem-text" class="text-7xl md:text-8xl font-bold tracking-tight">? X ?</span>
                </div>
            </div>
        </div>

        <!-- Botões -->
        <div class="mt-8 flex flex-col sm:flex-row gap-4 justify-center">
            <button id="draw-button" class="w-full sm:w-auto bg-indigo-600 hover:bg-indigo-700 text-white font-bold py-3 px-10 rounded-lg shadow-md transition-transform transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-indigo-300">
                Sortear
            </button>
             <button id="reset-button" class="w-full sm:w-auto bg-slate-500 hover:bg-slate-600 text-white font-bold py-3 px-10 rounded-lg shadow-md transition-transform transform hover:scale-105 focus:outline-none focus:ring-4 focus:ring-slate-300 hidden">
                Reiniciar
            </button>
        </div>
        
        <div id="counter" class="mt-4 text-slate-600 font-semibold">0 / 90 sorteados</div>

        <!-- Histórico -->
        <div class="mt-8 border-t pt-6">
            <h2 class="text-2xl font-semibold text-slate-700 mb-4">Números Sorteados</h2>
            <div id="history-grid" class="flex flex-wrap justify-center gap-2">
                <!-- O histórico será inserido aqui via JS -->
            </div>
        </div>

    </main>

    <script>
        // Elementos da UI
        const drawButton = document.getElementById('draw-button');
        const resetButton = document.getElementById('reset-button');
        const problemText = document.getElementById('problem-text');
        const historyGrid = document.getElementById('history-grid');
        const counter = document.getElementById('counter');

        // Estado do jogo
        let drawnProblems = new Set();
        const TOTAL_PROBLEMS = 9 * 10; // Tabuadas do 2 ao 10 (9 tabelas), vezes 1 a 10.

        // Event Listeners
        drawButton.addEventListener('click', drawNewProblem);
        resetButton.addEventListener('click', resetGame);

        function drawNewProblem() {
            // Apenas realiza o sorteio, sem verificar o estado do card
            performDraw();
        }
        
        function performDraw() {
            if (drawnProblems.size >= TOTAL_PROBLEMS) {
                problemText.textContent = 'FIM!';
                drawButton.disabled = true;
                drawButton.classList.add('opacity-50', 'cursor-not-allowed');
                resetButton.classList.remove('hidden');
                return;
            }

            let num1, num2, problem;
            
            // Garante que o problema sorteado é único
            do {
                num1 = Math.floor(Math.random() * 9) + 2; // Número de 2 a 10
                num2 = Math.floor(Math.random() * 10) + 1; // Número de 1 a 10
                problem = `${num1} X ${num2}`;
            } while (drawnProblems.has(problem));

            // Adiciona ao set de sorteados
            drawnProblems.add(problem);

            // Atualiza a UI
            problemText.textContent = problem;
            updateCounter();
            
            // Adiciona ao histórico imediatamente
            addToHistory(problem);
        }

        function addToHistory(problem) {
            const historyItem = document.createElement('div');
            historyItem.className = 'bg-slate-200 p-2 rounded-md flex items-center justify-center shadow-sm w-24 text-center';
            
            const problemEl = document.createElement('span');
            problemEl.className = 'font-semibold text-slate-800 text-base';
            problemEl.textContent = problem;
            
            historyItem.appendChild(problemEl);
            
            historyGrid.appendChild(historyItem);
        }

        function updateCounter() {
            counter.textContent = `${drawnProblems.size} / ${TOTAL_PROBLEMS} sorteados`;
        }

        function resetGame() {
            drawnProblems.clear();
            historyGrid.innerHTML = '';
            problemText.textContent = '? X ?';
            updateCounter();
            
            drawButton.disabled = false;
            drawButton.classList.remove('opacity-50', 'cursor-not-allowed');
            resetButton.classList.add('hidden');
        }

    </script>
</body>
</html>




